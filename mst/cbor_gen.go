// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package mst

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *NodeData) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.L (cid.Cid) (struct)
	if len("l") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"l\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("l"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("l")); err != nil {
		return err
	}

	if t.L == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.L); err != nil {
			return xerrors.Errorf("failed to write cid field t.L: %w", err)
		}
	}

	// t.E ([]mst.TreeEntry) (slice)
	if len("e") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"e\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("e"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("e")); err != nil {
		return err
	}

	if len(t.E) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.E was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.E))); err != nil {
		return err
	}
	for _, v := range t.E {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *NodeData) UnmarshalCBOR(r io.Reader) (err error) {
	*t = NodeData{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NodeData: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.L (cid.Cid) (struct)
		case "l":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.L: %w", err)
					}

					t.L = &c
				}

			}
			// t.E ([]mst.TreeEntry) (slice)
		case "e":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.E: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.E = make([]TreeEntry, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v TreeEntry
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.E[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *TreeEntry) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.P (int64) (int64)
	if len("p") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"p\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("p"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("p")); err != nil {
		return err
	}

	if t.P >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.P)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.P-1)); err != nil {
			return err
		}
	}

	// t.K ([]uint8) (slice)
	if len("k") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"k\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("k"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("k")); err != nil {
		return err
	}

	if len(t.K) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.K was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.K))); err != nil {
		return err
	}

	if _, err := cw.Write(t.K[:]); err != nil {
		return err
	}

	// t.V (cid.Cid) (struct)
	if len("v") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"v\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("v"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("v")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.V); err != nil {
		return xerrors.Errorf("failed to write cid field t.V: %w", err)
	}

	// t.T (cid.Cid) (struct)
	if len("t") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"t\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("t"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("t")); err != nil {
		return err
	}

	if t.T == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.T); err != nil {
			return xerrors.Errorf("failed to write cid field t.T: %w", err)
		}
	}

	return nil
}

func (t *TreeEntry) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TreeEntry{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TreeEntry: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.P (int64) (int64)
		case "p":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.P = int64(extraI)
			}
			// t.K ([]uint8) (slice)
		case "k":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.K: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.K = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.K[:]); err != nil {
				return err
			}
			// t.V (cid.Cid) (struct)
		case "v":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.V: %w", err)
				}

				t.V = c

			}
			// t.T (cid.Cid) (struct)
		case "t":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.T: %w", err)
					}

					t.T = &c
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
